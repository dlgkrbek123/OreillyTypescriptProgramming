-------------------------------------------------------------------------------------------

타입 시스템
=> 최신 언어는 각자 타입시스템을 갖춤
=> 2가지 종류로 구분
     1. 컴파일러에 어떤 타입을 사용하는지를 명시적으로 알려주는 타입
     2. 자동으로 타입을 추론하는 타입 시스템
=> 타입 스크립트는 두가지 모두를 지원하므로 선택가능

=> : annotaion을 통해 명시적 타입을 지정
=> 사용하지 않으면 자동으로 타입 추론
=> annotation을 꼭 필요한 경우에 지정 (코드를 줄이기 위해)

-------------------------------------------------------------------------------------------

js는 타입이 동적으로 결정되지만 ts는 정적으로 타입이 결정
js는 타입이 자동으로 변환 ts는 정적임
js는 런타임에 타입을 확인하지만 ts는 컴파일 타임에 타입을 확인
js는 런타임에 에러 검출, ts는 컴파일타임에 대부분 검출됨

-------------------------------------------------------------------------------------------

타입스크립트는 점진적으로 타입을 확인한다.
컴파일타임에 모든 타입에 대해 반드시 알 필요는 없다.
모든 타입을 알지 못하면 타입 추론이 오류를 미연에 검출하긴하지만 
많은 오류의 가능서이 남아있다.

-------------------------------------------------------------------------------------------

js는 weakly typed language
=> 이상한 연산을 수행해도 실행을 하려고 시도
=> 암묵적 변환을 통해 이상한 결과라도 도출 
   (ex) 3 + [1] => "31"

ts는 유효하지 않은 작업에 즉각적으로 에러 발생
js의 암묵적 변환떄문에 원인 추적이 난해
타입 변환은 명시적인게 옳다

-------------------------------------------------------------------------------------------

모든 타입스크립트 프로젝트는 root에 tsconfig.json이라는 설정이 필요
타입스크립트를 어떻게 적용하고 컴파일할지 명시

> npm install -D typescript @types/node

// tsconfig.json
{
  "compilerOptions": {
    "lib": ["es2015"],
    "target": "es2015"
    "module": "commonjs",
    "outDir": "dist",
    "sourceMap": true,
    "strcit": true,
  },
  "include": [
    "src"
  ]
}

include : 타입스크립트 파일을 찾을 디렉토리
outDir  : 결과를 출력할 디렉토리
lib     : TSC가 실행환경에서 사용할수 있다고 가정하는 API (브라우져의 경우 "dom"을 추가)
target  : 컴파일 결과의 js버전
module  : 컴파일할 대상 모듈 시스템
strict  : 타입 검사의 강도를 지정

-------------------------------------------------------------------------------------------