-------------------------------------------------------------------------------------------

type : 값과 값으로 할 수 있는 일의 집합
=> Boolean타입은 true/false와 수행가능한 연산자의 집합(&, ||, !)
=> number타입은 숫자와 숫자에 적용가능한 연산(+, -, *, /, %)
=> string타입은 모든 문자열과 문자열에 수행가능한 연산과 메서드 (+, ||, &&) (.concat, .substr)

즉 타입을 알면 가능한 연산도 알 수 있어 타입체킹시
유효하지 않은 동작을 발견 가능

-------------------------------------------------------------------------------------------

function squareOf(n) {
  return n * n;
}

위의 함수는 숫자를 파라미터로 받아야지 유효하다.
매개변수에 타입을 명시하자

function suqreOf(n: number) {
  return n * n;
}

!!타입에 호환되는(할당가능한) 값만 입력이 가능!!

타입 리터럴 : 하나의 값을 나타내는 타입

-------------------------------------------------------------------------------------------

any
=> 타입들의 대부, 최후의 보루
=> 무엇이든 할 수 있지만 꼭 필요한 상황이 아니라면 지양
=> 프로그래머와 타입스크립트가 타입을 알 수 없는 상황에서 사용

=> any는 모든 값과 그것으로 수행가능한 연산의 집합 
=> 뭐든지 할 수 있고, 타입 검사기가 동작 x

-------------------------------------------------------------------------------------------

unknown
=> 타입을 미리 알 수 없는 값에 명시적으로 사용
=> any와 같이 모든 값을 대표하지만, 값을 검사해
   refine하기 전까지는 값을 사용하지 못하게 막음

let a: unknown = 30; // unknown
let b = a === 123;   // boolean
let c = a + 10;      // 에러발생 => unknown에 +연산 불가

if(typeof a === "number") {
  // number타입일 경우로 좁힌 경우에만 
  // 추론에 의해 아래와 같이 연산 가능
  let d = a + 10;    // number
}

-------------------------------------------------------------------------------------------

boolean
=> true || false

let a = true
var b = false
const c = true
let d: boolean = true
let e: true = true
let f: true = false // false 타입을 true타입에 할당 불가

a,b  => boolean으로 추론
c    => const변수라 true로 추론 
d    => boolean임을 명시적 선언
e,f  => 값이 특정 boolean값임을 명시적 선언

-------------------------------------------------------------------------------------------

number
=> 모든 숫자의 집합

let a = 1234;            // number
var b = Infinity * 0.1;  // number
const c = 5678;          // 5678
let d = a < b            // boolean
let e: number = 100;     // number
let f : 26.218 = 26.218  // 26.218
let g: 26.218 = 10       // Error

-------------------------------------------------------------------------------------------

string
=> 모든 문자열의 집합

let a = 'hello'          // string
var b = 'billy'          // string
const c = '!'            // '!'
let d = a + ' ' + b + c  // string
let e: string = 'zoom'   // string
let f: 'john' = 'john'   // 'john'
let g: 'john' = 'zoe'    // Error

-------------------------------------------------------------------------------------------

symbol
=> 객체와 맵에서 문자열 키를 대신하는 용도로 사용
=> 알려진 키만 사용가능하게 강제하여 실수를 방지
=> es2015에 추가, 실무에서 잘 사용되지 않는 편

let a = Symbol('a');         // symbol
let b:symbol = Symbol('b');  // symbol
var c = a === b;             // boolean
let d = a + 'x';             // Error + 연산 적용 불가능

생성된 심볼은 unique하다
다른 심볼과 비교 연산시 같지않다고 판단

const e = Symbol(e');                 // const => unique symbol로 추론
const f: unique symbol = Symbol('f')  // unique symbol로 명시적 선언
let g: unique symbol = Symbol('f')    // Error => unique symbol은 const여야함

let h = e === e;                      // boolean
let i = e === f;                      // Error => 항상 false라고 에러 발생

-------------------------------------------------------------------------------------------

객체
=> 객체 타입은 객체의 shape를 정의
=> js는 구조 기반 타입이라 new로 생성한 객체와 
   리터럴로 생성한 객체를 구분 x (프로퍼티로 타입을 판단)

// 덕 타이핑
let c: { firstName: string; lastName: string } = {
  firstName: 'john',
  lastName: 'barrowman'
}

class Person {
  constructor(
    public fistName: string,
    publie lastName: string
  ) {}
}
c = new Person('matt', 'smith') // 프로퍼티가 일치하므로 허용



타입스크립트는 객체 프로퍼티 검사에 엄격
=> 한 프로퍼티가 없거나 다른 프로퍼티가 있으면 에러 발생

let a: { b: number }

a = {}; // Error => b 프로퍼티가 없음
a = {
  b: 1,
  c: 2, // Error => { b: number; c: number }를 할당 불가
}


=> 옵셔널 프로퍼티
=> 인덱스 시그니쳐 : 명시적으로 정의한 키 외에 다양한 키를 안전하게 추가

let a: {
  b: number;
  c?: string;
  [key: number]: boolean;
}

=> readonly로 프로퍼티를 읽기전용 처리
let user: {
  readonly firstName: string;
}

{}, Object        => 이 두가지는 사용하지 않는 것이 좋다.
객체리터럴, object   => 권장

-------------------------------------------------------------------------------------------

Type Alias
=> 재정의는 불가능
=> 변수처럼 block scoped

type Age = number;
type Person = {
  name: string;
  age: Age;
}


Union (합집합), Intersection (교집합)
=> 타입에 적용가능한 연산자 (&, |)
=> 실무에서 유니온을 많이 쓴다.

type Cat = { name: string, purrs: boolean }
type Dog = { name: string, barks: boolean, wags: boolean }

type CatOrDogOrBoth = Cat | Dog  => 2개중 하나만 만족시키면 ok
type CatAndDog = Cat & Dog       => 2개를 다 만족시켜야

-------------------------------------------------------------------------------------------

배열
=> 배열의 요소는 보통 homogeneous
=> number[] or Array<number>

let a = [1, 2, 3];         // number[]
var b = ['a', 'b']         // string[]
let c: string[] = ['a'];   // string[]
let d = [1, 'a'];          // (string | number)[]
const e = [2, 'b']         // (string | number)[]

let f = ['red'];
f.push('blue');
f.push(true);              // Error => string 타입에 할당 불가


let g = [];                // any[]
g.push(1)                  // number[]
g.push('red')              // (number | string)[]

let h: number[] = []      // number[]
h.push(1);
h.push('red');            // Error => string을 number타입 매개변수에 할당 불가


// 배열 타입 추론
function buildArray() {
  let a = [];  // any[]
  a.push(1);   // number[]
  a.push('x'); // (string | number)[]
  return a;
}

let arr = buildArray(); // (string | number)[] 로 확정
arr.push(true);         // Error => boolean 할당 불가

-------------------------------------------------------------------------------------------

튜플
=> 배열의 서브타입
=> 길이가 고정되어있으며, 각 인덱스의 타입이 결정됨
=> 선택형 요소도 지원

let a: [number] = [1];
let b: [string, string, number] = ['malcolm', 'gladwell', 1963]
let trainFares: [number, number?][] = [
  [1, 2],
  [3]
]

=> readonly를 써서 읽기전용 배열을 설정
=> push, splice를 못하게 막기

let as: readonly number[] = [1, 2, 3];

-------------------------------------------------------------------------------------------

undefined => 아직 미정의
null      => 값이 없다고 정의
void      => 명시적으로 리턴하지 않는 함수의 반환 타입
never     => 절대 반환하지 않는 함수(예외 발생 or 무한루프)

-------------------------------------------------------------------------------------------

열거형
=> 사용가능한 값을 열거하는 기법
=> 키를 값에 할당하는 순서없는 자료구조
=> 문자열->문자열 or 문자열=>숫자

// 아래와 같이 추론됨
enum Language {
  English,
  Spanish,
  Russian
}

// 명시적 선언가능
enum Language {
  English = 0,
  Spanish = 1,
  Russian = 2
}

Language.Russian;
Language['English'];

enum Color {
  Red = '#c10000',
  Blue = '#007ac1',
  Pink = 0xc10050
  Red = 255
}

-------------------------------------------------------------------------------------------